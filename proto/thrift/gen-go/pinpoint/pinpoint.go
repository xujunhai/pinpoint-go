// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package pinpoint

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TJvmGcType int64

const (
	TJvmGcType_UNKNOWN  TJvmGcType = 0
	TJvmGcType_SERIAL   TJvmGcType = 1
	TJvmGcType_PARALLEL TJvmGcType = 2
	TJvmGcType_CMS      TJvmGcType = 3
	TJvmGcType_G1       TJvmGcType = 4
)

func (p TJvmGcType) String() string {
	switch p {
	case TJvmGcType_UNKNOWN:
		return "UNKNOWN"
	case TJvmGcType_SERIAL:
		return "SERIAL"
	case TJvmGcType_PARALLEL:
		return "PARALLEL"
	case TJvmGcType_CMS:
		return "CMS"
	case TJvmGcType_G1:
		return "G1"
	}
	return "<UNSET>"
}

func TJvmGcTypeFromString(s string) (TJvmGcType, error) {
	switch s {
	case "UNKNOWN":
		return TJvmGcType_UNKNOWN, nil
	case "SERIAL":
		return TJvmGcType_SERIAL, nil
	case "PARALLEL":
		return TJvmGcType_PARALLEL, nil
	case "CMS":
		return TJvmGcType_CMS, nil
	case "G1":
		return TJvmGcType_G1, nil
	}
	return TJvmGcType(0), fmt.Errorf("not a valid TJvmGcType string")
}

func TJvmGcTypePtr(v TJvmGcType) *TJvmGcType { return &v }

func (p TJvmGcType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TJvmGcType) UnmarshalText(text []byte) error {
	q, err := TJvmGcTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TJvmGcType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TJvmGcType(v)
	return nil
}

func (p *TJvmGcType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - ServiceName
//  - ServiceLibs
type TServiceInfo struct {
	ServiceName *string  `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
	ServiceLibs []string `thrift:"serviceLibs,2" db:"serviceLibs" json:"serviceLibs,omitempty"`
}

func NewTServiceInfo() *TServiceInfo {
	return &TServiceInfo{}
}

var TServiceInfo_ServiceName_DEFAULT string

func (p *TServiceInfo) GetServiceName() string {
	if !p.IsSetServiceName() {
		return TServiceInfo_ServiceName_DEFAULT
	}
	return *p.ServiceName
}

var TServiceInfo_ServiceLibs_DEFAULT []string

func (p *TServiceInfo) GetServiceLibs() []string {
	return p.ServiceLibs
}
func (p *TServiceInfo) IsSetServiceName() bool {
	return p.ServiceName != nil
}

func (p *TServiceInfo) IsSetServiceLibs() bool {
	return p.ServiceLibs != nil
}

func (p *TServiceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TServiceInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ServiceLibs = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.ServiceLibs = append(p.ServiceLibs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TServiceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServiceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TServiceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceName() {
		if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceLibs() {
		if err := oprot.WriteFieldBegin("serviceLibs", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceLibs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ServiceLibs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ServiceLibs {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceLibs: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServiceInfo(%+v)", *p)
}

// Attributes:
//  - ServerInfo
//  - VmArgs_
//  - ServiceInfos
type TServerMetaData struct {
	ServerInfo *string  `thrift:"serverInfo,1" db:"serverInfo" json:"serverInfo,omitempty"`
	VmArgs_    []string `thrift:"vmArgs,2" db:"vmArgs" json:"vmArgs,omitempty"`
	// unused fields # 3 to 9
	ServiceInfos []*TServiceInfo `thrift:"serviceInfos,10" db:"serviceInfos" json:"serviceInfos,omitempty"`
}

func NewTServerMetaData() *TServerMetaData {
	return &TServerMetaData{}
}

var TServerMetaData_ServerInfo_DEFAULT string

func (p *TServerMetaData) GetServerInfo() string {
	if !p.IsSetServerInfo() {
		return TServerMetaData_ServerInfo_DEFAULT
	}
	return *p.ServerInfo
}

var TServerMetaData_VmArgs__DEFAULT []string

func (p *TServerMetaData) GetVmArgs_() []string {
	return p.VmArgs_
}

var TServerMetaData_ServiceInfos_DEFAULT []*TServiceInfo

func (p *TServerMetaData) GetServiceInfos() []*TServiceInfo {
	return p.ServiceInfos
}
func (p *TServerMetaData) IsSetServerInfo() bool {
	return p.ServerInfo != nil
}

func (p *TServerMetaData) IsSetVmArgs_() bool {
	return p.VmArgs_ != nil
}

func (p *TServerMetaData) IsSetServiceInfos() bool {
	return p.ServiceInfos != nil
}

func (p *TServerMetaData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TServerMetaData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServerInfo = &v
	}
	return nil
}

func (p *TServerMetaData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.VmArgs_ = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.VmArgs_ = append(p.VmArgs_, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TServerMetaData) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TServiceInfo, 0, size)
	p.ServiceInfos = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &TServiceInfo{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.ServiceInfos = append(p.ServiceInfos, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TServerMetaData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServerMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TServerMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerInfo() {
		if err := oprot.WriteFieldBegin("serverInfo", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServerInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serverInfo (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverInfo: ", p), err)
		}
	}
	return err
}

func (p *TServerMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVmArgs_() {
		if err := oprot.WriteFieldBegin("vmArgs", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmArgs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.VmArgs_)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VmArgs_ {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmArgs: ", p), err)
		}
	}
	return err
}

func (p *TServerMetaData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceInfos() {
		if err := oprot.WriteFieldBegin("serviceInfos", thrift.LIST, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ServiceInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ServiceInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceInfos: ", p), err)
		}
	}
	return err
}

func (p *TServerMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServerMetaData(%+v)", *p)
}

// Attributes:
//  - Version
//  - VmVersion
//  - GcType
type TJvmInfo struct {
	Version   int16      `thrift:"version,1" db:"version" json:"version"`
	VmVersion *string    `thrift:"vmVersion,2" db:"vmVersion" json:"vmVersion,omitempty"`
	GcType    TJvmGcType `thrift:"gcType,3" db:"gcType" json:"gcType"`
}

func NewTJvmInfo() *TJvmInfo {
	return &TJvmInfo{
		GcType: 0,
	}
}

func (p *TJvmInfo) GetVersion() int16 {
	return p.Version
}

var TJvmInfo_VmVersion_DEFAULT string

func (p *TJvmInfo) GetVmVersion() string {
	if !p.IsSetVmVersion() {
		return TJvmInfo_VmVersion_DEFAULT
	}
	return *p.VmVersion
}

var TJvmInfo_GcType_DEFAULT TJvmGcType = 0

func (p *TJvmInfo) GetGcType() TJvmGcType {
	return p.GcType
}
func (p *TJvmInfo) IsSetVmVersion() bool {
	return p.VmVersion != nil
}

func (p *TJvmInfo) IsSetGcType() bool {
	return p.GcType != TJvmInfo_GcType_DEFAULT
}

func (p *TJvmInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TJvmInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *TJvmInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VmVersion = &v
	}
	return nil
}

func (p *TJvmInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := TJvmGcType(v)
		p.GcType = temp
	}
	return nil
}

func (p *TJvmInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TJvmInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TJvmInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *TJvmInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVmVersion() {
		if err := oprot.WriteFieldBegin("vmVersion", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmVersion: ", p), err)
		}
		if err := oprot.WriteString(string(*p.VmVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vmVersion (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmVersion: ", p), err)
		}
	}
	return err
}

func (p *TJvmInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGcType() {
		if err := oprot.WriteFieldBegin("gcType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gcType: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.GcType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gcType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gcType: ", p), err)
		}
	}
	return err
}

func (p *TJvmInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJvmInfo(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - IP
//  - Ports
//  - AgentId
//  - ApplicationName
//  - ServiceType
//  - Pid
//  - AgentVersion
//  - VmVersion
//  - StartTimestamp
//  - EndTimestamp
//  - EndStatus
//  - ServerMetaData
//  - JvmInfo
type TAgentInfo struct {
	Hostname        string `thrift:"hostname,1" db:"hostname" json:"hostname"`
	IP              string `thrift:"ip,2" db:"ip" json:"ip"`
	Ports           string `thrift:"ports,3" db:"ports" json:"ports"`
	AgentId         string `thrift:"agentId,4" db:"agentId" json:"agentId"`
	ApplicationName string `thrift:"applicationName,5" db:"applicationName" json:"applicationName"`
	ServiceType     int16  `thrift:"serviceType,6" db:"serviceType" json:"serviceType"`
	Pid             int32  `thrift:"pid,7" db:"pid" json:"pid"`
	AgentVersion    string `thrift:"agentVersion,8" db:"agentVersion" json:"agentVersion"`
	VmVersion       string `thrift:"vmVersion,9" db:"vmVersion" json:"vmVersion"`
	StartTimestamp  int64  `thrift:"startTimestamp,10" db:"startTimestamp" json:"startTimestamp"`
	EndTimestamp    *int64 `thrift:"endTimestamp,11" db:"endTimestamp" json:"endTimestamp,omitempty"`
	EndStatus       *int32 `thrift:"endStatus,12" db:"endStatus" json:"endStatus,omitempty"`
	// unused fields # 13 to 19
	ServerMetaData *TServerMetaData `thrift:"serverMetaData,20" db:"serverMetaData" json:"serverMetaData,omitempty"`
	// unused fields # 21 to 29
	JvmInfo *TJvmInfo `thrift:"jvmInfo,30" db:"jvmInfo" json:"jvmInfo,omitempty"`
}

func NewTAgentInfo() *TAgentInfo {
	return &TAgentInfo{}
}

func (p *TAgentInfo) GetHostname() string {
	return p.Hostname
}

func (p *TAgentInfo) GetIP() string {
	return p.IP
}

func (p *TAgentInfo) GetPorts() string {
	return p.Ports
}

func (p *TAgentInfo) GetAgentId() string {
	return p.AgentId
}

func (p *TAgentInfo) GetApplicationName() string {
	return p.ApplicationName
}

func (p *TAgentInfo) GetServiceType() int16 {
	return p.ServiceType
}

func (p *TAgentInfo) GetPid() int32 {
	return p.Pid
}

func (p *TAgentInfo) GetAgentVersion() string {
	return p.AgentVersion
}

func (p *TAgentInfo) GetVmVersion() string {
	return p.VmVersion
}

func (p *TAgentInfo) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

var TAgentInfo_EndTimestamp_DEFAULT int64

func (p *TAgentInfo) GetEndTimestamp() int64 {
	if !p.IsSetEndTimestamp() {
		return TAgentInfo_EndTimestamp_DEFAULT
	}
	return *p.EndTimestamp
}

var TAgentInfo_EndStatus_DEFAULT int32

func (p *TAgentInfo) GetEndStatus() int32 {
	if !p.IsSetEndStatus() {
		return TAgentInfo_EndStatus_DEFAULT
	}
	return *p.EndStatus
}

var TAgentInfo_ServerMetaData_DEFAULT *TServerMetaData

func (p *TAgentInfo) GetServerMetaData() *TServerMetaData {
	if !p.IsSetServerMetaData() {
		return TAgentInfo_ServerMetaData_DEFAULT
	}
	return p.ServerMetaData
}

var TAgentInfo_JvmInfo_DEFAULT *TJvmInfo

func (p *TAgentInfo) GetJvmInfo() *TJvmInfo {
	if !p.IsSetJvmInfo() {
		return TAgentInfo_JvmInfo_DEFAULT
	}
	return p.JvmInfo
}
func (p *TAgentInfo) IsSetEndTimestamp() bool {
	return p.EndTimestamp != nil
}

func (p *TAgentInfo) IsSetEndStatus() bool {
	return p.EndStatus != nil
}

func (p *TAgentInfo) IsSetServerMetaData() bool {
	return p.ServerMetaData != nil
}

func (p *TAgentInfo) IsSetJvmInfo() bool {
	return p.JvmInfo != nil
}

func (p *TAgentInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAgentInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *TAgentInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *TAgentInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ports = v
	}
	return nil
}

func (p *TAgentInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TAgentInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ApplicationName = v
	}
	return nil
}

func (p *TAgentInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ServiceType = v
	}
	return nil
}

func (p *TAgentInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Pid = v
	}
	return nil
}

func (p *TAgentInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AgentVersion = v
	}
	return nil
}

func (p *TAgentInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.VmVersion = v
	}
	return nil
}

func (p *TAgentInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *TAgentInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.EndTimestamp = &v
	}
	return nil
}

func (p *TAgentInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EndStatus = &v
	}
	return nil
}

func (p *TAgentInfo) ReadField20(iprot thrift.TProtocol) error {
	p.ServerMetaData = &TServerMetaData{}
	if err := p.ServerMetaData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerMetaData), err)
	}
	return nil
}

func (p *TAgentInfo) ReadField30(iprot thrift.TProtocol) error {
	p.JvmInfo = &TJvmInfo{
		GcType: 0,
	}
	if err := p.JvmInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmInfo), err)
	}
	return nil
}

func (p *TAgentInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAgentInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAgentInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Hostname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ports", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ports: ", p), err)
	}
	if err := oprot.WriteString(string(p.Ports)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ports (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ports: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agentId: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationName", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:applicationName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ApplicationName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationName (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:applicationName: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceType", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serviceType: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ServiceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serviceType: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pid", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Pid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pid (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pid: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentVersion", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agentVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentVersion (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agentVersion: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vmVersion", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vmVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.VmVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vmVersion (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vmVersion: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:startTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:startTimestamp: ", p), err)
	}
	return err
}

func (p *TAgentInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTimestamp() {
		if err := oprot.WriteFieldBegin("endTimestamp", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:endTimestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EndTimestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endTimestamp (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:endTimestamp: ", p), err)
		}
	}
	return err
}

func (p *TAgentInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndStatus() {
		if err := oprot.WriteFieldBegin("endStatus", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:endStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EndStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endStatus (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:endStatus: ", p), err)
		}
	}
	return err
}

func (p *TAgentInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerMetaData() {
		if err := oprot.WriteFieldBegin("serverMetaData", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:serverMetaData: ", p), err)
		}
		if err := p.ServerMetaData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerMetaData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:serverMetaData: ", p), err)
		}
	}
	return err
}

func (p *TAgentInfo) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmInfo() {
		if err := oprot.WriteFieldBegin("jvmInfo", thrift.STRUCT, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:jvmInfo: ", p), err)
		}
		if err := p.JvmInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:jvmInfo: ", p), err)
		}
	}
	return err
}

func (p *TAgentInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentInfo(%+v)", *p)
}

// Attributes:
//  - JvmGcNewCount
//  - JvmGcNewTime
//  - JvmPoolCodeCacheUsed
//  - JvmPoolNewGenUsed
//  - JvmPoolOldGenUsed
//  - JvmPoolSurvivorSpaceUsed
//  - JvmPoolPermGenUsed
//  - JvmPoolMetaspaceUsed
type TJvmGcDetailed struct {
	JvmGcNewCount            *int64   `thrift:"jvmGcNewCount,1" db:"jvmGcNewCount" json:"jvmGcNewCount,omitempty"`
	JvmGcNewTime             *int64   `thrift:"jvmGcNewTime,2" db:"jvmGcNewTime" json:"jvmGcNewTime,omitempty"`
	JvmPoolCodeCacheUsed     *float64 `thrift:"jvmPoolCodeCacheUsed,3" db:"jvmPoolCodeCacheUsed" json:"jvmPoolCodeCacheUsed,omitempty"`
	JvmPoolNewGenUsed        *float64 `thrift:"jvmPoolNewGenUsed,4" db:"jvmPoolNewGenUsed" json:"jvmPoolNewGenUsed,omitempty"`
	JvmPoolOldGenUsed        *float64 `thrift:"jvmPoolOldGenUsed,5" db:"jvmPoolOldGenUsed" json:"jvmPoolOldGenUsed,omitempty"`
	JvmPoolSurvivorSpaceUsed *float64 `thrift:"jvmPoolSurvivorSpaceUsed,6" db:"jvmPoolSurvivorSpaceUsed" json:"jvmPoolSurvivorSpaceUsed,omitempty"`
	JvmPoolPermGenUsed       *float64 `thrift:"jvmPoolPermGenUsed,7" db:"jvmPoolPermGenUsed" json:"jvmPoolPermGenUsed,omitempty"`
	JvmPoolMetaspaceUsed     *float64 `thrift:"jvmPoolMetaspaceUsed,8" db:"jvmPoolMetaspaceUsed" json:"jvmPoolMetaspaceUsed,omitempty"`
}

func NewTJvmGcDetailed() *TJvmGcDetailed {
	return &TJvmGcDetailed{}
}

var TJvmGcDetailed_JvmGcNewCount_DEFAULT int64

func (p *TJvmGcDetailed) GetJvmGcNewCount() int64 {
	if !p.IsSetJvmGcNewCount() {
		return TJvmGcDetailed_JvmGcNewCount_DEFAULT
	}
	return *p.JvmGcNewCount
}

var TJvmGcDetailed_JvmGcNewTime_DEFAULT int64

func (p *TJvmGcDetailed) GetJvmGcNewTime() int64 {
	if !p.IsSetJvmGcNewTime() {
		return TJvmGcDetailed_JvmGcNewTime_DEFAULT
	}
	return *p.JvmGcNewTime
}

var TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolCodeCacheUsed() float64 {
	if !p.IsSetJvmPoolCodeCacheUsed() {
		return TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT
	}
	return *p.JvmPoolCodeCacheUsed
}

var TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolNewGenUsed() float64 {
	if !p.IsSetJvmPoolNewGenUsed() {
		return TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT
	}
	return *p.JvmPoolNewGenUsed
}

var TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolOldGenUsed() float64 {
	if !p.IsSetJvmPoolOldGenUsed() {
		return TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT
	}
	return *p.JvmPoolOldGenUsed
}

var TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceUsed() float64 {
	if !p.IsSetJvmPoolSurvivorSpaceUsed() {
		return TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT
	}
	return *p.JvmPoolSurvivorSpaceUsed
}

var TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolPermGenUsed() float64 {
	if !p.IsSetJvmPoolPermGenUsed() {
		return TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT
	}
	return *p.JvmPoolPermGenUsed
}

var TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT float64

func (p *TJvmGcDetailed) GetJvmPoolMetaspaceUsed() float64 {
	if !p.IsSetJvmPoolMetaspaceUsed() {
		return TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT
	}
	return *p.JvmPoolMetaspaceUsed
}
func (p *TJvmGcDetailed) IsSetJvmGcNewCount() bool {
	return p.JvmGcNewCount != nil
}

func (p *TJvmGcDetailed) IsSetJvmGcNewTime() bool {
	return p.JvmGcNewTime != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheUsed() bool {
	return p.JvmPoolCodeCacheUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenUsed() bool {
	return p.JvmPoolNewGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenUsed() bool {
	return p.JvmPoolOldGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceUsed() bool {
	return p.JvmPoolSurvivorSpaceUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenUsed() bool {
	return p.JvmPoolPermGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceUsed() bool {
	return p.JvmPoolMetaspaceUsed != nil
}

func (p *TJvmGcDetailed) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JvmGcNewCount = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.JvmGcNewTime = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.JvmPoolCodeCacheUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.JvmPoolNewGenUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.JvmPoolOldGenUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.JvmPoolSurvivorSpaceUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.JvmPoolPermGenUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.JvmPoolMetaspaceUsed = &v
	}
	return nil
}

func (p *TJvmGcDetailed) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TJvmGcDetailed"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TJvmGcDetailed) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmGcNewCount() {
		if err := oprot.WriteFieldBegin("jvmGcNewCount", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmGcNewCount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.JvmGcNewCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewCount (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmGcNewCount: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmGcNewTime() {
		if err := oprot.WriteFieldBegin("jvmGcNewTime", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmGcNewTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.JvmGcNewTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewTime (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmGcNewTime: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolCodeCacheUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolCodeCacheUsed", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmPoolCodeCacheUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolCodeCacheUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheUsed (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmPoolCodeCacheUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolNewGenUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolNewGenUsed", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmPoolNewGenUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolNewGenUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenUsed (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmPoolNewGenUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolOldGenUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolOldGenUsed", thrift.DOUBLE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmPoolOldGenUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolOldGenUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenUsed (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmPoolOldGenUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolSurvivorSpaceUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolSurvivorSpaceUsed", thrift.DOUBLE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmPoolSurvivorSpaceUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolSurvivorSpaceUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceUsed (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmPoolSurvivorSpaceUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolPermGenUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolPermGenUsed", thrift.DOUBLE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmPoolPermGenUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolPermGenUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenUsed (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmPoolPermGenUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmPoolMetaspaceUsed() {
		if err := oprot.WriteFieldBegin("jvmPoolMetaspaceUsed", thrift.DOUBLE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmPoolMetaspaceUsed: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmPoolMetaspaceUsed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceUsed (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmPoolMetaspaceUsed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGcDetailed) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJvmGcDetailed(%+v)", *p)
}

// Attributes:
//  - Type
//  - JvmMemoryHeapUsed
//  - JvmMemoryHeapMax
//  - JvmMemoryNonHeapUsed
//  - JvmMemoryNonHeapMax
//  - JvmGcOldCount
//  - JvmGcOldTime
//  - JvmGcDetailed
type TJvmGc struct {
	Type                 TJvmGcType      `thrift:"type,1" db:"type" json:"type"`
	JvmMemoryHeapUsed    int64           `thrift:"jvmMemoryHeapUsed,2" db:"jvmMemoryHeapUsed" json:"jvmMemoryHeapUsed"`
	JvmMemoryHeapMax     int64           `thrift:"jvmMemoryHeapMax,3" db:"jvmMemoryHeapMax" json:"jvmMemoryHeapMax"`
	JvmMemoryNonHeapUsed int64           `thrift:"jvmMemoryNonHeapUsed,4" db:"jvmMemoryNonHeapUsed" json:"jvmMemoryNonHeapUsed"`
	JvmMemoryNonHeapMax  int64           `thrift:"jvmMemoryNonHeapMax,5" db:"jvmMemoryNonHeapMax" json:"jvmMemoryNonHeapMax"`
	JvmGcOldCount        int64           `thrift:"jvmGcOldCount,6" db:"jvmGcOldCount" json:"jvmGcOldCount"`
	JvmGcOldTime         int64           `thrift:"jvmGcOldTime,7" db:"jvmGcOldTime" json:"jvmGcOldTime"`
	JvmGcDetailed        *TJvmGcDetailed `thrift:"jvmGcDetailed,8" db:"jvmGcDetailed" json:"jvmGcDetailed,omitempty"`
}

func NewTJvmGc() *TJvmGc {
	return &TJvmGc{
		Type: 0,
	}
}

func (p *TJvmGc) GetType() TJvmGcType {
	return p.Type
}

func (p *TJvmGc) GetJvmMemoryHeapUsed() int64 {
	return p.JvmMemoryHeapUsed
}

func (p *TJvmGc) GetJvmMemoryHeapMax() int64 {
	return p.JvmMemoryHeapMax
}

func (p *TJvmGc) GetJvmMemoryNonHeapUsed() int64 {
	return p.JvmMemoryNonHeapUsed
}

func (p *TJvmGc) GetJvmMemoryNonHeapMax() int64 {
	return p.JvmMemoryNonHeapMax
}

func (p *TJvmGc) GetJvmGcOldCount() int64 {
	return p.JvmGcOldCount
}

func (p *TJvmGc) GetJvmGcOldTime() int64 {
	return p.JvmGcOldTime
}

var TJvmGc_JvmGcDetailed_DEFAULT *TJvmGcDetailed

func (p *TJvmGc) GetJvmGcDetailed() *TJvmGcDetailed {
	if !p.IsSetJvmGcDetailed() {
		return TJvmGc_JvmGcDetailed_DEFAULT
	}
	return p.JvmGcDetailed
}
func (p *TJvmGc) IsSetJvmGcDetailed() bool {
	return p.JvmGcDetailed != nil
}

func (p *TJvmGc) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TJvmGc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TJvmGcType(v)
		p.Type = temp
	}
	return nil
}

func (p *TJvmGc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.JvmMemoryHeapUsed = v
	}
	return nil
}

func (p *TJvmGc) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.JvmMemoryHeapMax = v
	}
	return nil
}

func (p *TJvmGc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.JvmMemoryNonHeapUsed = v
	}
	return nil
}

func (p *TJvmGc) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.JvmMemoryNonHeapMax = v
	}
	return nil
}

func (p *TJvmGc) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.JvmGcOldCount = v
	}
	return nil
}

func (p *TJvmGc) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.JvmGcOldTime = v
	}
	return nil
}

func (p *TJvmGc) ReadField8(iprot thrift.TProtocol) error {
	p.JvmGcDetailed = &TJvmGcDetailed{}
	if err := p.JvmGcDetailed.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmGcDetailed), err)
	}
	return nil
}

func (p *TJvmGc) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TJvmGc"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TJvmGc) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmMemoryHeapUsed", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmMemoryHeapUsed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmMemoryHeapUsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapUsed (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmMemoryHeapUsed: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmMemoryHeapMax", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmMemoryHeapMax: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmMemoryHeapMax)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapMax (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmMemoryHeapMax: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmMemoryNonHeapUsed", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmMemoryNonHeapUsed: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmMemoryNonHeapUsed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapUsed (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmMemoryNonHeapUsed: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmMemoryNonHeapMax", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmMemoryNonHeapMax: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmMemoryNonHeapMax)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapMax (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmMemoryNonHeapMax: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmGcOldCount", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmGcOldCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmGcOldCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldCount (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmGcOldCount: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jvmGcOldTime", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmGcOldTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JvmGcOldTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldTime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmGcOldTime: ", p), err)
	}
	return err
}

func (p *TJvmGc) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmGcDetailed() {
		if err := oprot.WriteFieldBegin("jvmGcDetailed", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmGcDetailed: ", p), err)
		}
		if err := p.JvmGcDetailed.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmGcDetailed), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmGcDetailed: ", p), err)
		}
	}
	return err
}

func (p *TJvmGc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TJvmGc(%+v)", *p)
}

// Attributes:
//  - JvmCpuLoad
//  - SystemCpuLoad
type TCpuLoad struct {
	JvmCpuLoad    *float64 `thrift:"jvmCpuLoad,1" db:"jvmCpuLoad" json:"jvmCpuLoad,omitempty"`
	SystemCpuLoad *float64 `thrift:"systemCpuLoad,2" db:"systemCpuLoad" json:"systemCpuLoad,omitempty"`
}

func NewTCpuLoad() *TCpuLoad {
	return &TCpuLoad{}
}

var TCpuLoad_JvmCpuLoad_DEFAULT float64

func (p *TCpuLoad) GetJvmCpuLoad() float64 {
	if !p.IsSetJvmCpuLoad() {
		return TCpuLoad_JvmCpuLoad_DEFAULT
	}
	return *p.JvmCpuLoad
}

var TCpuLoad_SystemCpuLoad_DEFAULT float64

func (p *TCpuLoad) GetSystemCpuLoad() float64 {
	if !p.IsSetSystemCpuLoad() {
		return TCpuLoad_SystemCpuLoad_DEFAULT
	}
	return *p.SystemCpuLoad
}
func (p *TCpuLoad) IsSetJvmCpuLoad() bool {
	return p.JvmCpuLoad != nil
}

func (p *TCpuLoad) IsSetSystemCpuLoad() bool {
	return p.SystemCpuLoad != nil
}

func (p *TCpuLoad) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCpuLoad) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.JvmCpuLoad = &v
	}
	return nil
}

func (p *TCpuLoad) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SystemCpuLoad = &v
	}
	return nil
}

func (p *TCpuLoad) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCpuLoad"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCpuLoad) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetJvmCpuLoad() {
		if err := oprot.WriteFieldBegin("jvmCpuLoad", thrift.DOUBLE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmCpuLoad: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.JvmCpuLoad)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jvmCpuLoad (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmCpuLoad: ", p), err)
		}
	}
	return err
}

func (p *TCpuLoad) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemCpuLoad() {
		if err := oprot.WriteFieldBegin("systemCpuLoad", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemCpuLoad: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.SystemCpuLoad)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.systemCpuLoad (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemCpuLoad: ", p), err)
		}
	}
	return err
}

func (p *TCpuLoad) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCpuLoad(%+v)", *p)
}

// Attributes:
//  - SampledNewCount
//  - SampledContinuationCount
//  - UnsampledNewCount
//  - UnsampledContinuationCount
type TTransaction struct {
	// unused field # 1
	SampledNewCount            *int64 `thrift:"sampledNewCount,2" db:"sampledNewCount" json:"sampledNewCount,omitempty"`
	SampledContinuationCount   *int64 `thrift:"sampledContinuationCount,3" db:"sampledContinuationCount" json:"sampledContinuationCount,omitempty"`
	UnsampledNewCount          *int64 `thrift:"unsampledNewCount,4" db:"unsampledNewCount" json:"unsampledNewCount,omitempty"`
	UnsampledContinuationCount *int64 `thrift:"unsampledContinuationCount,5" db:"unsampledContinuationCount" json:"unsampledContinuationCount,omitempty"`
}

func NewTTransaction() *TTransaction {
	return &TTransaction{}
}

var TTransaction_SampledNewCount_DEFAULT int64

func (p *TTransaction) GetSampledNewCount() int64 {
	if !p.IsSetSampledNewCount() {
		return TTransaction_SampledNewCount_DEFAULT
	}
	return *p.SampledNewCount
}

var TTransaction_SampledContinuationCount_DEFAULT int64

func (p *TTransaction) GetSampledContinuationCount() int64 {
	if !p.IsSetSampledContinuationCount() {
		return TTransaction_SampledContinuationCount_DEFAULT
	}
	return *p.SampledContinuationCount
}

var TTransaction_UnsampledNewCount_DEFAULT int64

func (p *TTransaction) GetUnsampledNewCount() int64 {
	if !p.IsSetUnsampledNewCount() {
		return TTransaction_UnsampledNewCount_DEFAULT
	}
	return *p.UnsampledNewCount
}

var TTransaction_UnsampledContinuationCount_DEFAULT int64

func (p *TTransaction) GetUnsampledContinuationCount() int64 {
	if !p.IsSetUnsampledContinuationCount() {
		return TTransaction_UnsampledContinuationCount_DEFAULT
	}
	return *p.UnsampledContinuationCount
}
func (p *TTransaction) IsSetSampledNewCount() bool {
	return p.SampledNewCount != nil
}

func (p *TTransaction) IsSetSampledContinuationCount() bool {
	return p.SampledContinuationCount != nil
}

func (p *TTransaction) IsSetUnsampledNewCount() bool {
	return p.UnsampledNewCount != nil
}

func (p *TTransaction) IsSetUnsampledContinuationCount() bool {
	return p.UnsampledContinuationCount != nil
}

func (p *TTransaction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTransaction) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SampledNewCount = &v
	}
	return nil
}

func (p *TTransaction) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SampledContinuationCount = &v
	}
	return nil
}

func (p *TTransaction) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UnsampledNewCount = &v
	}
	return nil
}

func (p *TTransaction) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UnsampledContinuationCount = &v
	}
	return nil
}

func (p *TTransaction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TTransaction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTransaction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampledNewCount() {
		if err := oprot.WriteFieldBegin("sampledNewCount", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampledNewCount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SampledNewCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sampledNewCount (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampledNewCount: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampledContinuationCount() {
		if err := oprot.WriteFieldBegin("sampledContinuationCount", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sampledContinuationCount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SampledContinuationCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sampledContinuationCount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sampledContinuationCount: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnsampledNewCount() {
		if err := oprot.WriteFieldBegin("unsampledNewCount", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unsampledNewCount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UnsampledNewCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unsampledNewCount (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unsampledNewCount: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnsampledContinuationCount() {
		if err := oprot.WriteFieldBegin("unsampledContinuationCount", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unsampledContinuationCount: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UnsampledContinuationCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unsampledContinuationCount (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unsampledContinuationCount: ", p), err)
		}
	}
	return err
}

func (p *TTransaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTransaction(%+v)", *p)
}

// Attributes:
//  - Version
//  - HistogramSchemaType
//  - ActiveTraceCount
type TActiveTraceHistogram struct {
	Version             int16   `thrift:"version,1" db:"version" json:"version"`
	HistogramSchemaType *int32  `thrift:"histogramSchemaType,2" db:"histogramSchemaType" json:"histogramSchemaType,omitempty"`
	ActiveTraceCount    []int32 `thrift:"activeTraceCount,3" db:"activeTraceCount" json:"activeTraceCount,omitempty"`
}

func NewTActiveTraceHistogram() *TActiveTraceHistogram {
	return &TActiveTraceHistogram{}
}

func (p *TActiveTraceHistogram) GetVersion() int16 {
	return p.Version
}

var TActiveTraceHistogram_HistogramSchemaType_DEFAULT int32

func (p *TActiveTraceHistogram) GetHistogramSchemaType() int32 {
	if !p.IsSetHistogramSchemaType() {
		return TActiveTraceHistogram_HistogramSchemaType_DEFAULT
	}
	return *p.HistogramSchemaType
}

var TActiveTraceHistogram_ActiveTraceCount_DEFAULT []int32

func (p *TActiveTraceHistogram) GetActiveTraceCount() []int32 {
	return p.ActiveTraceCount
}
func (p *TActiveTraceHistogram) IsSetHistogramSchemaType() bool {
	return p.HistogramSchemaType != nil
}

func (p *TActiveTraceHistogram) IsSetActiveTraceCount() bool {
	return p.ActiveTraceCount != nil
}

func (p *TActiveTraceHistogram) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TActiveTraceHistogram) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *TActiveTraceHistogram) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HistogramSchemaType = &v
	}
	return nil
}

func (p *TActiveTraceHistogram) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ActiveTraceCount = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.ActiveTraceCount = append(p.ActiveTraceCount, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TActiveTraceHistogram) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TActiveTraceHistogram"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TActiveTraceHistogram) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *TActiveTraceHistogram) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHistogramSchemaType() {
		if err := oprot.WriteFieldBegin("histogramSchemaType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:histogramSchemaType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.HistogramSchemaType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.histogramSchemaType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:histogramSchemaType: ", p), err)
		}
	}
	return err
}

func (p *TActiveTraceHistogram) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveTraceCount() {
		if err := oprot.WriteFieldBegin("activeTraceCount", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeTraceCount: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.ActiveTraceCount)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ActiveTraceCount {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeTraceCount: ", p), err)
		}
	}
	return err
}

func (p *TActiveTraceHistogram) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TActiveTraceHistogram(%+v)", *p)
}

// Attributes:
//  - Histogram
type TActiveTrace struct {
	Histogram *TActiveTraceHistogram `thrift:"histogram,1" db:"histogram" json:"histogram,omitempty"`
}

func NewTActiveTrace() *TActiveTrace {
	return &TActiveTrace{}
}

var TActiveTrace_Histogram_DEFAULT *TActiveTraceHistogram

func (p *TActiveTrace) GetHistogram() *TActiveTraceHistogram {
	if !p.IsSetHistogram() {
		return TActiveTrace_Histogram_DEFAULT
	}
	return p.Histogram
}
func (p *TActiveTrace) IsSetHistogram() bool {
	return p.Histogram != nil
}

func (p *TActiveTrace) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TActiveTrace) ReadField1(iprot thrift.TProtocol) error {
	p.Histogram = &TActiveTraceHistogram{}
	if err := p.Histogram.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Histogram), err)
	}
	return nil
}

func (p *TActiveTrace) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TActiveTrace"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TActiveTrace) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHistogram() {
		if err := oprot.WriteFieldBegin("histogram", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:histogram: ", p), err)
		}
		if err := p.Histogram.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Histogram), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:histogram: ", p), err)
		}
	}
	return err
}

func (p *TActiveTrace) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TActiveTrace(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - StartTimestamp
//  - Timestamp
//  - CollectInterval
//  - Gc
//  - CpuLoad
//  - Transaction
//  - ActiveTrace
//  - Metadata
type TAgentStat struct {
	AgentId         *string `thrift:"agentId,1" db:"agentId" json:"agentId,omitempty"`
	StartTimestamp  *int64  `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp,omitempty"`
	Timestamp       *int64  `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
	CollectInterval *int64  `thrift:"collectInterval,4" db:"collectInterval" json:"collectInterval,omitempty"`
	// unused fields # 5 to 9
	Gc *TJvmGc `thrift:"gc,10" db:"gc" json:"gc,omitempty"`
	// unused fields # 11 to 19
	CpuLoad *TCpuLoad `thrift:"cpuLoad,20" db:"cpuLoad" json:"cpuLoad,omitempty"`
	// unused fields # 21 to 29
	Transaction *TTransaction `thrift:"transaction,30" db:"transaction" json:"transaction,omitempty"`
	// unused fields # 31 to 39
	ActiveTrace *TActiveTrace `thrift:"activeTrace,40" db:"activeTrace" json:"activeTrace,omitempty"`
	// unused fields # 41 to 199
	Metadata *string `thrift:"metadata,200" db:"metadata" json:"metadata,omitempty"`
}

func NewTAgentStat() *TAgentStat {
	return &TAgentStat{}
}

var TAgentStat_AgentId_DEFAULT string

func (p *TAgentStat) GetAgentId() string {
	if !p.IsSetAgentId() {
		return TAgentStat_AgentId_DEFAULT
	}
	return *p.AgentId
}

var TAgentStat_StartTimestamp_DEFAULT int64

func (p *TAgentStat) GetStartTimestamp() int64 {
	if !p.IsSetStartTimestamp() {
		return TAgentStat_StartTimestamp_DEFAULT
	}
	return *p.StartTimestamp
}

var TAgentStat_Timestamp_DEFAULT int64

func (p *TAgentStat) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TAgentStat_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TAgentStat_CollectInterval_DEFAULT int64

func (p *TAgentStat) GetCollectInterval() int64 {
	if !p.IsSetCollectInterval() {
		return TAgentStat_CollectInterval_DEFAULT
	}
	return *p.CollectInterval
}

var TAgentStat_Gc_DEFAULT *TJvmGc

func (p *TAgentStat) GetGc() *TJvmGc {
	if !p.IsSetGc() {
		return TAgentStat_Gc_DEFAULT
	}
	return p.Gc
}

var TAgentStat_CpuLoad_DEFAULT *TCpuLoad

func (p *TAgentStat) GetCpuLoad() *TCpuLoad {
	if !p.IsSetCpuLoad() {
		return TAgentStat_CpuLoad_DEFAULT
	}
	return p.CpuLoad
}

var TAgentStat_Transaction_DEFAULT *TTransaction

func (p *TAgentStat) GetTransaction() *TTransaction {
	if !p.IsSetTransaction() {
		return TAgentStat_Transaction_DEFAULT
	}
	return p.Transaction
}

var TAgentStat_ActiveTrace_DEFAULT *TActiveTrace

func (p *TAgentStat) GetActiveTrace() *TActiveTrace {
	if !p.IsSetActiveTrace() {
		return TAgentStat_ActiveTrace_DEFAULT
	}
	return p.ActiveTrace
}

var TAgentStat_Metadata_DEFAULT string

func (p *TAgentStat) GetMetadata() string {
	if !p.IsSetMetadata() {
		return TAgentStat_Metadata_DEFAULT
	}
	return *p.Metadata
}
func (p *TAgentStat) IsSetAgentId() bool {
	return p.AgentId != nil
}

func (p *TAgentStat) IsSetStartTimestamp() bool {
	return p.StartTimestamp != nil
}

func (p *TAgentStat) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TAgentStat) IsSetCollectInterval() bool {
	return p.CollectInterval != nil
}

func (p *TAgentStat) IsSetGc() bool {
	return p.Gc != nil
}

func (p *TAgentStat) IsSetCpuLoad() bool {
	return p.CpuLoad != nil
}

func (p *TAgentStat) IsSetTransaction() bool {
	return p.Transaction != nil
}

func (p *TAgentStat) IsSetActiveTrace() bool {
	return p.ActiveTrace != nil
}

func (p *TAgentStat) IsSetMetadata() bool {
	return p.Metadata != nil
}

func (p *TAgentStat) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 200:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField200(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAgentStat) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = &v
	}
	return nil
}

func (p *TAgentStat) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartTimestamp = &v
	}
	return nil
}

func (p *TAgentStat) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TAgentStat) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CollectInterval = &v
	}
	return nil
}

func (p *TAgentStat) ReadField10(iprot thrift.TProtocol) error {
	p.Gc = &TJvmGc{
		Type: 0,
	}
	if err := p.Gc.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gc), err)
	}
	return nil
}

func (p *TAgentStat) ReadField20(iprot thrift.TProtocol) error {
	p.CpuLoad = &TCpuLoad{}
	if err := p.CpuLoad.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CpuLoad), err)
	}
	return nil
}

func (p *TAgentStat) ReadField30(iprot thrift.TProtocol) error {
	p.Transaction = &TTransaction{}
	if err := p.Transaction.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
	}
	return nil
}

func (p *TAgentStat) ReadField40(iprot thrift.TProtocol) error {
	p.ActiveTrace = &TActiveTrace{}
	if err := p.ActiveTrace.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActiveTrace), err)
	}
	return nil
}

func (p *TAgentStat) ReadField200(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 200: ", err)
	} else {
		p.Metadata = &v
	}
	return nil
}

func (p *TAgentStat) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAgentStat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField200(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAgentStat) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgentId() {
		if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AgentId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimestamp() {
		if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartTimestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollectInterval() {
		if err := oprot.WriteFieldBegin("collectInterval", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:collectInterval: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CollectInterval)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.collectInterval (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:collectInterval: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGc() {
		if err := oprot.WriteFieldBegin("gc", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:gc: ", p), err)
		}
		if err := p.Gc.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gc), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:gc: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLoad() {
		if err := oprot.WriteFieldBegin("cpuLoad", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cpuLoad: ", p), err)
		}
		if err := p.CpuLoad.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CpuLoad), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cpuLoad: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransaction() {
		if err := oprot.WriteFieldBegin("transaction", thrift.STRUCT, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:transaction: ", p), err)
		}
		if err := p.Transaction.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:transaction: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveTrace() {
		if err := oprot.WriteFieldBegin("activeTrace", thrift.STRUCT, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:activeTrace: ", p), err)
		}
		if err := p.ActiveTrace.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActiveTrace), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:activeTrace: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetadata() {
		if err := oprot.WriteFieldBegin("metadata", thrift.STRING, 200); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:metadata: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Metadata)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.metadata (200) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 200:metadata: ", p), err)
		}
	}
	return err
}

func (p *TAgentStat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentStat(%+v)", *p)
}

// Attributes:
//  - AgentId
//  - StartTimestamp
//  - AgentStats
type TAgentStatBatch struct {
	AgentId        string `thrift:"agentId,1" db:"agentId" json:"agentId"`
	StartTimestamp int64  `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp"`
	// unused fields # 3 to 9
	AgentStats []*TAgentStat `thrift:"agentStats,10" db:"agentStats" json:"agentStats"`
}

func NewTAgentStatBatch() *TAgentStatBatch {
	return &TAgentStatBatch{}
}

func (p *TAgentStatBatch) GetAgentId() string {
	return p.AgentId
}

func (p *TAgentStatBatch) GetStartTimestamp() int64 {
	return p.StartTimestamp
}

func (p *TAgentStatBatch) GetAgentStats() []*TAgentStat {
	return p.AgentStats
}
func (p *TAgentStatBatch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAgentStatBatch) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AgentId = v
	}
	return nil
}

func (p *TAgentStatBatch) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartTimestamp = v
	}
	return nil
}

func (p *TAgentStatBatch) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TAgentStat, 0, size)
	p.AgentStats = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &TAgentStat{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.AgentStats = append(p.AgentStats, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAgentStatBatch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAgentStatBatch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAgentStatBatch) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AgentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err)
	}
	return err
}

func (p *TAgentStatBatch) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTimestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err)
	}
	return err
}

func (p *TAgentStatBatch) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("agentStats", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:agentStats: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AgentStats)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AgentStats {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:agentStats: ", p), err)
	}
	return err
}

func (p *TAgentStatBatch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAgentStatBatch(%+v)", *p)
}
